Use as a guide:
http://linkedin.github.com/glu/docs/latest/html/tutorial.html


** make sure all agents, consoles and zookeepers are stopped

1. init lab
	./bin/tutorial.sh setup
2. start the tutorial
	./bin/tutorial.sh start

3. login (admin/admin)

4. Establish a fabric if it doesn't exist
	Admin Screen
	name: 		glu-dev-1
	zk connect:	localhost:2181
	zk timeout:	30s

5. View the Agent
6. View log Files
7. View Processes
7a. Kill a process
8. Load a model
	http://localhost:8080/glu/repository/systems/sample-webapp-system.json
8a. View the Model!
	browse to: http://localhost:8080/glu/repository/systems/sample-webapp-system.json
**
9. Lets load a different model.. load (after a review)
https://raw.github.com/kensipe/glu-lab/master/another-sample-system.json

10. Goto the dashboard
11. Select Plans
12.  Select Deploy and Execute it!
12. Browse to http://localhost:9000/sample-app/home.jsp
13. (In Console) Select Model
14. Select top model, change "contextPath" to "/sample" and Save
15. Visit the dashboard
16. Examine the delta and fix it

17. Go back to the model load and load the tutorial model
18. Deploy it!


Lab Script Review:  
1. Review the Jetty Deployment Script
	http://localhost:8080/glu/repository/scripts/org.linkedin.glu.script-jetty-4.0.0/JettyGluScript.groovy
2. look at the script state for pid and port
3. determine where these values are set
4. (In Console) Set Agents, agent-1
5. select the "View Details" button
6. review the the scriptState

Go through the rest of the tutorial... then follow the labs below.

** View the Agent Logs!

Lab Script Creation:
1. Using the model below as a template create a model.json 
{
  "entries": [
    {
      "agent": "agent-1",
      "metadata": {
        "cluster": "c1",
        "container": {"name": "sample"},
        "product": "product2",
        "version": "1.0.1"
      },
      "mountPoint": "/mymount/i001",
      "script": "** you need your script here **",
      "tags": [
        "mytag"
      ]
    }
  ],
  "fabric": "glu-dev-1",
  "metadata": {"product": {
    "product1": {
      "name": "product1",
      "version": "1.0.1"
    }
  },
    "name": "Lab MyGluScript Model"
  }
}

2. Create a script:
class MyGluScript {
		
	def install = {
		println "installing..."
	}
	
	def configure = {
		println "configuring..."		
	}
	
	def start = {
		println "starting..."		
	}
	
	def stop = {
		println "stopping..."
	}
	
	def unconfigure = {
		println "un-configuring..."
	}
	
	def uninstall = {
		println "uninstalling... we were never here..."
	}	
}

3. deploy your model / scripts

Lab: Script State Varables
1. create a script state varable in the MyGluScript named serverType
2. during the start closure body, assign the value of the server type in the serverType var
	**hint: uname 
	** in groovy 'uname'.execute().text
3. Reload / Redeploy 
4. View the state variable
